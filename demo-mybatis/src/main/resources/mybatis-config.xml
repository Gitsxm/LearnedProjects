<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <properties resource="db.properties"></properties>
    <settings>
        <!-- 打印查询语句 -->
        <setting name="logImpl" value="STDOUT_LOGGING"/>
        <!-- 控制全局缓存（二级缓存）-->
        <setting name="cacheEnabled" value="true"/>
        <!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。默认 false  -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 当开启时，任何方法的调用都会加载该对象的所有属性。默认 false，可通过select标签的 fetchType来覆盖-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--  Mybatis 创建具有延迟加载能力的对象所用到的代理工具，默认JAVASSIST -->
        <!--<setting name="proxyFactory" value="CGLIB" />-->
        <!-- STATEMENT级别的缓存，使一级缓存，只针对当前执行的这一statement有效 -->
        <!--
                <setting name="localCacheScope" value="STATEMENT"/>
        -->
        <setting name="localCacheScope" value="SESSION"/>
    </settings>
    <!--类别名-->
    <typeAliases>
        <typeAlias alias="person" type="org.example.entity.Person"/>
    </typeAliases>
    <!--类型处理器-->
    <!--<typeHandlers>
            <typeHandler handler="com.wuzz.type.MyTypeHandler"></typeHandler>
        </typeHandlers>-->
    <!-- 对象工厂 -->
    <!--<objectFactory type="com.wuzz.objectfactory.GPObjectFactory">
            <property name="wuzz" value="666"/>
        </objectFactory>-->
    <!--插件-->
    <plugins>
<!--        <plugin interceptor="org.example.plugin.MyPlugin">-->
<!--            <property name="dbType" value="mysql"/>-->
<!--        </plugin>-->
<!--        <plugin interceptor="org.example.plugin.QueryLimitPlugin">-->
<!--            <property name="dbType" value="mysql"/>-->
<!--            <property name="limit" value="10"/>-->
<!--        </plugin>-->
        <plugin interceptor="org.example.plugin.pageplugin.PagingPlugin">
            <property name="default.page" value="1"/>
            <property name="default.pageSize" value="10"/>
            <property name="default.useFlag" value="false"/>
            <property name="default.checkFlag" value="false"/>
        </plugin>
    </plugins>
    <!--配置环境-->
    <environments default="development">
        <!--环境变量-->
        <environment id="development">
            <!--事务管理器-->
            <transactionManager type="JDBC"/><!-- 单独使用时配置成MANAGED没有事务 -->
            <!--数据源-->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--数据库厂商标识
    <databaseIdProvider type="org.example.config.MyDatabaseIdProvider">
        <property name="Oracle" value="oracle"/>
        <property name="MySQL" value="mysql"/>
    </databaseIdProvider>-->
    <!--映射器-->
    <mappers>
        <!--指定映射器路径-->
        <!--        <mapper resource="mapping/PersonMapper.xml"/>-->
        <!--通过扫描接口方式注册 注意*Mapper.xml 也要放在对应接口的目录下，maven 工程要配置resources 将 src 目录下的*.xml 打包-->
        <mapper class="org.example.dao.PersonMapper"/>
        <!--包扫描方式注册 注意*Mapper.xml 也要放在对应接口的目录下，maven 工程要配置resources 将 src 目录下的*.xml 打包-->
        <!--        <package name="org.example.dao"/>-->
    </mappers>
</configuration>